//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Dual_Limb_Unity/LimbInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @LimbInputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @LimbInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""LimbInputSystem"",
    ""maps"": [
        {
            ""name"": ""Person"",
            ""id"": ""df731708-42a6-40f4-a4d3-67c42308e700"",
            ""actions"": [
                {
                    ""name"": ""RightStickInput"",
                    ""type"": ""Value"",
                    ""id"": ""4d917f92-10fe-43df-92c3-b5110fb9bf07"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftStickInput"",
                    ""type"": ""Value"",
                    ""id"": ""4eee47a7-5e91-4aa0-9898-cd4ab6721265"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fc6cb404-806d-4979-b290-1e02464d7798"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStickInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6718fa30-33ad-4129-8657-0c97a5a8b9f4"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStickInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hand"",
            ""id"": ""8b1fd7cb-142b-41ad-b0d5-177e9f33591b"",
            ""actions"": [
                {
                    ""name"": ""LeftStickInput"",
                    ""type"": ""Value"",
                    ""id"": ""876963d6-3a9c-4295-950c-b538cdecdf78"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateHandLRUD"",
                    ""type"": ""Value"",
                    ""id"": ""3676eba8-ddaf-4399-894a-0b141cd5e9f4"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightStickInput"",
                    ""type"": ""Value"",
                    ""id"": ""b527d31c-c88b-4d65-9a11-aea047279ed9"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateButton"",
                    ""type"": ""Button"",
                    ""id"": ""0b39323f-09ab-4ff8-88a3-479caf38e5c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveHandUD"",
                    ""type"": ""Value"",
                    ""id"": ""9ab5e792-06fa-4557-9545-8b095113582b"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveUDButton"",
                    ""type"": ""Button"",
                    ""id"": ""24fdb79d-8b5b-4b39-8dc2-fd9a39294b48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab (Pressed)"",
                    ""type"": ""Button"",
                    ""id"": ""32a78d85-eaba-4097-a0e9-1297999120ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TwistHandButton"",
                    ""type"": ""Button"",
                    ""id"": ""1f2dc5d7-7730-4b18-93c2-9d2f63ed77d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9f840a02-fe91-4710-9ed8-9e59ca8006e2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStickInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cff7d4a5-6182-4237-a465-64b0d8447aa7"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateHandLRUD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fa22185-09a9-4f86-99d6-fbc98082b2b2"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad19f58f-9e27-4339-a972-3d14f4f153a5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveHandUD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b6b67f4-42c9-4a04-bd92-1995a16a0c14"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUDButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28478a85-9366-409e-8cac-96863f423a5c"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab (Pressed)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9533da79-09c4-4727-bb08-7a66af00102e"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStickInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99aa3aa2-7c97-446c-b087-3a10f426d813"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TwistHandButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Person
        m_Person = asset.FindActionMap("Person", throwIfNotFound: true);
        m_Person_RightStickInput = m_Person.FindAction("RightStickInput", throwIfNotFound: true);
        m_Person_LeftStickInput = m_Person.FindAction("LeftStickInput", throwIfNotFound: true);
        // Hand
        m_Hand = asset.FindActionMap("Hand", throwIfNotFound: true);
        m_Hand_LeftStickInput = m_Hand.FindAction("LeftStickInput", throwIfNotFound: true);
        m_Hand_RotateHandLRUD = m_Hand.FindAction("RotateHandLRUD", throwIfNotFound: true);
        m_Hand_RightStickInput = m_Hand.FindAction("RightStickInput", throwIfNotFound: true);
        m_Hand_RotateButton = m_Hand.FindAction("RotateButton", throwIfNotFound: true);
        m_Hand_MoveHandUD = m_Hand.FindAction("MoveHandUD", throwIfNotFound: true);
        m_Hand_MoveUDButton = m_Hand.FindAction("MoveUDButton", throwIfNotFound: true);
        m_Hand_GrabPressed = m_Hand.FindAction("Grab (Pressed)", throwIfNotFound: true);
        m_Hand_TwistHandButton = m_Hand.FindAction("TwistHandButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Person
    private readonly InputActionMap m_Person;
    private List<IPersonActions> m_PersonActionsCallbackInterfaces = new List<IPersonActions>();
    private readonly InputAction m_Person_RightStickInput;
    private readonly InputAction m_Person_LeftStickInput;
    public struct PersonActions
    {
        private @LimbInputSystem m_Wrapper;
        public PersonActions(@LimbInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightStickInput => m_Wrapper.m_Person_RightStickInput;
        public InputAction @LeftStickInput => m_Wrapper.m_Person_LeftStickInput;
        public InputActionMap Get() { return m_Wrapper.m_Person; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PersonActions set) { return set.Get(); }
        public void AddCallbacks(IPersonActions instance)
        {
            if (instance == null || m_Wrapper.m_PersonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PersonActionsCallbackInterfaces.Add(instance);
            @RightStickInput.started += instance.OnRightStickInput;
            @RightStickInput.performed += instance.OnRightStickInput;
            @RightStickInput.canceled += instance.OnRightStickInput;
            @LeftStickInput.started += instance.OnLeftStickInput;
            @LeftStickInput.performed += instance.OnLeftStickInput;
            @LeftStickInput.canceled += instance.OnLeftStickInput;
        }

        private void UnregisterCallbacks(IPersonActions instance)
        {
            @RightStickInput.started -= instance.OnRightStickInput;
            @RightStickInput.performed -= instance.OnRightStickInput;
            @RightStickInput.canceled -= instance.OnRightStickInput;
            @LeftStickInput.started -= instance.OnLeftStickInput;
            @LeftStickInput.performed -= instance.OnLeftStickInput;
            @LeftStickInput.canceled -= instance.OnLeftStickInput;
        }

        public void RemoveCallbacks(IPersonActions instance)
        {
            if (m_Wrapper.m_PersonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPersonActions instance)
        {
            foreach (var item in m_Wrapper.m_PersonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PersonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PersonActions @Person => new PersonActions(this);

    // Hand
    private readonly InputActionMap m_Hand;
    private List<IHandActions> m_HandActionsCallbackInterfaces = new List<IHandActions>();
    private readonly InputAction m_Hand_LeftStickInput;
    private readonly InputAction m_Hand_RotateHandLRUD;
    private readonly InputAction m_Hand_RightStickInput;
    private readonly InputAction m_Hand_RotateButton;
    private readonly InputAction m_Hand_MoveHandUD;
    private readonly InputAction m_Hand_MoveUDButton;
    private readonly InputAction m_Hand_GrabPressed;
    private readonly InputAction m_Hand_TwistHandButton;
    public struct HandActions
    {
        private @LimbInputSystem m_Wrapper;
        public HandActions(@LimbInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftStickInput => m_Wrapper.m_Hand_LeftStickInput;
        public InputAction @RotateHandLRUD => m_Wrapper.m_Hand_RotateHandLRUD;
        public InputAction @RightStickInput => m_Wrapper.m_Hand_RightStickInput;
        public InputAction @RotateButton => m_Wrapper.m_Hand_RotateButton;
        public InputAction @MoveHandUD => m_Wrapper.m_Hand_MoveHandUD;
        public InputAction @MoveUDButton => m_Wrapper.m_Hand_MoveUDButton;
        public InputAction @GrabPressed => m_Wrapper.m_Hand_GrabPressed;
        public InputAction @TwistHandButton => m_Wrapper.m_Hand_TwistHandButton;
        public InputActionMap Get() { return m_Wrapper.m_Hand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HandActions set) { return set.Get(); }
        public void AddCallbacks(IHandActions instance)
        {
            if (instance == null || m_Wrapper.m_HandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HandActionsCallbackInterfaces.Add(instance);
            @LeftStickInput.started += instance.OnLeftStickInput;
            @LeftStickInput.performed += instance.OnLeftStickInput;
            @LeftStickInput.canceled += instance.OnLeftStickInput;
            @RotateHandLRUD.started += instance.OnRotateHandLRUD;
            @RotateHandLRUD.performed += instance.OnRotateHandLRUD;
            @RotateHandLRUD.canceled += instance.OnRotateHandLRUD;
            @RightStickInput.started += instance.OnRightStickInput;
            @RightStickInput.performed += instance.OnRightStickInput;
            @RightStickInput.canceled += instance.OnRightStickInput;
            @RotateButton.started += instance.OnRotateButton;
            @RotateButton.performed += instance.OnRotateButton;
            @RotateButton.canceled += instance.OnRotateButton;
            @MoveHandUD.started += instance.OnMoveHandUD;
            @MoveHandUD.performed += instance.OnMoveHandUD;
            @MoveHandUD.canceled += instance.OnMoveHandUD;
            @MoveUDButton.started += instance.OnMoveUDButton;
            @MoveUDButton.performed += instance.OnMoveUDButton;
            @MoveUDButton.canceled += instance.OnMoveUDButton;
            @GrabPressed.started += instance.OnGrabPressed;
            @GrabPressed.performed += instance.OnGrabPressed;
            @GrabPressed.canceled += instance.OnGrabPressed;
            @TwistHandButton.started += instance.OnTwistHandButton;
            @TwistHandButton.performed += instance.OnTwistHandButton;
            @TwistHandButton.canceled += instance.OnTwistHandButton;
        }

        private void UnregisterCallbacks(IHandActions instance)
        {
            @LeftStickInput.started -= instance.OnLeftStickInput;
            @LeftStickInput.performed -= instance.OnLeftStickInput;
            @LeftStickInput.canceled -= instance.OnLeftStickInput;
            @RotateHandLRUD.started -= instance.OnRotateHandLRUD;
            @RotateHandLRUD.performed -= instance.OnRotateHandLRUD;
            @RotateHandLRUD.canceled -= instance.OnRotateHandLRUD;
            @RightStickInput.started -= instance.OnRightStickInput;
            @RightStickInput.performed -= instance.OnRightStickInput;
            @RightStickInput.canceled -= instance.OnRightStickInput;
            @RotateButton.started -= instance.OnRotateButton;
            @RotateButton.performed -= instance.OnRotateButton;
            @RotateButton.canceled -= instance.OnRotateButton;
            @MoveHandUD.started -= instance.OnMoveHandUD;
            @MoveHandUD.performed -= instance.OnMoveHandUD;
            @MoveHandUD.canceled -= instance.OnMoveHandUD;
            @MoveUDButton.started -= instance.OnMoveUDButton;
            @MoveUDButton.performed -= instance.OnMoveUDButton;
            @MoveUDButton.canceled -= instance.OnMoveUDButton;
            @GrabPressed.started -= instance.OnGrabPressed;
            @GrabPressed.performed -= instance.OnGrabPressed;
            @GrabPressed.canceled -= instance.OnGrabPressed;
            @TwistHandButton.started -= instance.OnTwistHandButton;
            @TwistHandButton.performed -= instance.OnTwistHandButton;
            @TwistHandButton.canceled -= instance.OnTwistHandButton;
        }

        public void RemoveCallbacks(IHandActions instance)
        {
            if (m_Wrapper.m_HandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHandActions instance)
        {
            foreach (var item in m_Wrapper.m_HandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HandActions @Hand => new HandActions(this);
    public interface IPersonActions
    {
        void OnRightStickInput(InputAction.CallbackContext context);
        void OnLeftStickInput(InputAction.CallbackContext context);
    }
    public interface IHandActions
    {
        void OnLeftStickInput(InputAction.CallbackContext context);
        void OnRotateHandLRUD(InputAction.CallbackContext context);
        void OnRightStickInput(InputAction.CallbackContext context);
        void OnRotateButton(InputAction.CallbackContext context);
        void OnMoveHandUD(InputAction.CallbackContext context);
        void OnMoveUDButton(InputAction.CallbackContext context);
        void OnGrabPressed(InputAction.CallbackContext context);
        void OnTwistHandButton(InputAction.CallbackContext context);
    }
}
